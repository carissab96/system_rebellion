{
  "analysis_timestamp": "/home/carissab/Documents/mod7/system_rebellion",
  "metrics": {
    "CPU": {
      "all_fields_accessed": [
        "cores",
        "cpu",
        "cpu_core_count",
        "cpu_frequency",
        "cpu_model",
        "cpu_temperature",
        "cpu_thread_count",
        "cpu_usage",
        "frequency_mhz",
        "length",
        "model_name",
        "overall_usage",
        "process_count",
        "reduce",
        "temperature",
        "thread_count",
        "top_processes"
      ],
      "expected_structure": {
        "cores": {
          "type": "object",
          "children": [
            "length",
            "map",
            "slice"
          ]
        },
        "cpu": {
          "type": "value"
        },
        "cpu_core_count": {
          "type": "value"
        },
        "cpu_frequency": {
          "type": "value"
        },
        "cpu_model": {
          "type": "value"
        },
        "cpu_temperature": {
          "type": "value"
        },
        "cpu_thread_count": {
          "type": "value"
        },
        "cpu_usage": {
          "type": "value"
        },
        "frequency_mhz": {
          "type": "value"
        },
        "length": {
          "type": "value"
        },
        "model_name": {
          "type": "value"
        },
        "overall_usage": {
          "type": "object",
          "children": [
            "toFixed"
          ]
        },
        "process_count": {
          "type": "value"
        },
        "reduce": {
          "type": "value"
        },
        "temperature": {
          "type": "object",
          "children": [
            "critical",
            "current",
            "max",
            "min",
            "throttle_threshold",
            "unit"
          ]
        },
        "thread_count": {
          "type": "value"
        },
        "top_processes": {
          "type": "object",
          "children": [
            "length",
            "slice"
          ]
        }
      },
      "main_component_fields": [
        "cpu",
        "cpu_core_count",
        "cpu_frequency",
        "cpu_model",
        "cpu_temperature",
        "cpu_thread_count",
        "cpu_usage"
      ],
      "subcomponent_fields": {
        "CPUCoresTab": [],
        "CPUOverviewTab": [
          "cores",
          "frequency_mhz",
          "model_name",
          "overall_usage",
          "process_count",
          "temperature",
          "thread_count",
          "top_processes"
        ],
        "CPUProcessesTab": [],
        "CPUThermalTab": [
          "length",
          "reduce"
        ]
      },
      "transformer_code": "\n    # Transform CPU metrics\n    if \"cpu\" in metrics:\n        cpu_data = metrics[\"cpu\"]\n        \n        transformed[\"cpu_fields\"] = {\n            \"cpu\": cpu_data.get(\"cpu\", \n                      cpu_data.get(\"cpu\", 0)),\n            \"cpu_core_count\": cpu_data.get(\"cpu_core_count\", \n                      cpu_data.get(\"core_count\", 0)),\n            \"cpu_frequency\": cpu_data.get(\"cpu_frequency\", \n                      cpu_data.get(\"frequency\", 0)),\n            \"cpu_model\": cpu_data.get(\"cpu_model\", \n                      cpu_data.get(\"model\", 0)),\n            \"cpu_temperature\": cpu_data.get(\"cpu_temperature\", \n                      cpu_data.get(\"temperature\", 0)),\n            \"cpu_thread_count\": cpu_data.get(\"cpu_thread_count\", \n                      cpu_data.get(\"thread_count\", 0)),\n            \"cpu_usage\": cpu_data.get(\"cpu_usage\", \n                      cpu_data.get(\"usage\", 0)),\n            \"frequency_mhz\": cpu_data.get(\"frequency_mhz\", \n                      cpu_data.get(\"frequency_mhz\", 0)),\n            \"length\": cpu_data.get(\"length\", \n                      cpu_data.get(\"length\", 0)),\n            \"model_name\": cpu_data.get(\"model_name\", \n                      cpu_data.get(\"model_name\", 0)),\n            \"process_count\": cpu_data.get(\"process_count\", \n                      cpu_data.get(\"process_count\", 0)),\n            \"reduce\": cpu_data.get(\"reduce\", \n                      cpu_data.get(\"reduce\", 0)),\n            \"thread_count\": cpu_data.get(\"thread_count\", \n                      cpu_data.get(\"thread_count\", 0)),\n        }\n        \n        # Nested cores object\n        transformed[\"cores\"] = {\n            \"length\": cpu_data.get(\"cores\", {}).get(\"length\", []),\n            \"map\": cpu_data.get(\"cores\", {}).get(\"map\", []),\n            \"slice\": cpu_data.get(\"cores\", {}).get(\"slice\", []),\n        }\n        # Nested overall_usage object\n        transformed[\"overall_usage\"] = {\n            \"toFixed\": cpu_data.get(\"overall_usage\", {}).get(\"toFixed\", []),\n        }\n        # Nested temperature object\n        transformed[\"temperature\"] = {\n            \"critical\": cpu_data.get(\"temperature\", {}).get(\"critical\", []),\n            \"current\": cpu_data.get(\"temperature\", {}).get(\"current\", []),\n            \"max\": cpu_data.get(\"temperature\", {}).get(\"max\", []),\n            \"min\": cpu_data.get(\"temperature\", {}).get(\"min\", []),\n            \"throttle_threshold\": cpu_data.get(\"temperature\", {}).get(\"throttle_threshold\", []),\n            \"unit\": cpu_data.get(\"temperature\", {}).get(\"unit\", []),\n        }\n        # Nested top_processes object\n        transformed[\"top_processes\"] = {\n            \"length\": cpu_data.get(\"top_processes\", {}).get(\"length\", []),\n            \"slice\": cpu_data.get(\"top_processes\", {}).get(\"slice\", []),\n        }"
    },
    "Network": {
      "all_fields_accessed": [
        "network"
      ],
      "expected_structure": {
        "network": {
          "type": "value"
        }
      },
      "main_component_fields": [
        "network"
      ],
      "subcomponent_fields": {},
      "transformer_code": "\n    # Transform Network metrics\n    if \"network\" in metrics:\n        network_data = metrics[\"network\"]\n        \n        transformed[\"network_fields\"] = {\n            \"network\": network_data.get(\"network\", \n                      network_data.get(\"network\", 0)),\n        }\n        "
    }
  }
}