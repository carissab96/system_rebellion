"""
This type stub file was generated by pyright.
"""

from ..util import decorator, has_refcount_gc, py2k

if not has_refcount_gc:
    def non_refcount_gc_collect(*args): # -> None:
        ...
    
    lazy_gc = ...
else:
    gc_collect = ...
    def lazy_gc(): # -> None:
        ...
    
def picklers(): # -> Generator[tuple[Any, Callable[..., Any]], Any, None]:
    ...

if py2k:
    def random_choices(population, k=...): # -> list[Any]:
        ...
    
else:
    def random_choices(population, k=...): # -> list[Any]:
        ...
    
def round_decimal(value, prec): # -> float:
    ...

class RandomSet(set):
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def pop(self):
        ...
    
    def union(self, other): # -> RandomSet:
        ...
    
    def difference(self, other): # -> RandomSet:
        ...
    
    def intersection(self, other): # -> RandomSet:
        ...
    
    def copy(self): # -> RandomSet:
        ...
    


def conforms_partial_ordering(tuples, sorted_elements): # -> bool:
    """True if the given sorting conforms to the given partial ordering."""
    ...

def all_partial_orderings(tuples, elements): # -> Generator[list[Any] | Any, Any, None]:
    ...

def function_named(fn, name): # -> FunctionType:
    """Return a function with a given __name__.

    Will assign to __name__ and return the original function if possible on
    the Python implementation, otherwise a new function will be constructed.

    This function should be phased out as much as possible
    in favor of @decorator.   Tests that "generate" many named tests
    should be modernized.

    """
    ...

def run_as_contextmanager(ctx, fn, *arg, **kw):
    """Run the given function under the given contextmanager,
    simulating the behavior of 'with' to support older
    Python versions.

    This is not necessary anymore as we have placed 2.6
    as minimum Python version, however some tests are still using
    this structure.

    """
    ...

def rowset(results): # -> set[tuple[Any, ...]]:
    """Converts the results of sql execution into a plain set of column tuples.

    Useful for asserting the results of an unordered query.
    """
    ...

def fail(msg):
    ...

@decorator
def provide_metadata(fn, *args, **kw):
    """Provide bound MetaData for a single test, dropping afterwards.

    Legacy; use the "metadata" pytest fixture.

    """
    ...

def flag_combinations(*combinations):
    """A facade around @testing.combinations() oriented towards boolean
    keyword-based arguments.

    Basically generates a nice looking identifier based on the keywords
    and also sets up the argument names.

    E.g.::

        @testing.flag_combinations(
            dict(lazy=False, passive=False),
            dict(lazy=True, passive=False),
            dict(lazy=False, passive=True),
            dict(lazy=False, passive=True, raiseload=True),
        )


    would result in::

        @testing.combinations(
            ('', False, False, False),
            ('lazy', True, False, False),
            ('lazy_passive', True, True, False),
            ('lazy_passive', True, True, True),
            id_='iaaa',
            argnames='lazy,passive,raiseload'
        )

    """
    ...

def lambda_combinations(lambda_arg_sets, **kw):
    ...

def resolve_lambda(__fn, **kw): # -> Any:
    """Given a no-arg lambda and a namespace, return a new lambda that
    has all the values filled in.

    This is used so that we can have module-level fixtures that
    refer to instance-level variables using lambdas.

    """
    ...

def metadata_fixture(ddl=...): # -> Callable[..., Any]:
    """Provide MetaData for a pytest fixture."""
    ...

def force_drop_names(*names): # -> Callable[..., Any]:
    """Force the given table names to be dropped after test complete,
    isolating for foreign key cycles

    """
    ...

class adict(dict):
    """Dict keys available as attributes.  Shadows."""
    def __getattribute__(self, key): # -> Any:
        ...
    
    def __call__(self, *keys): # -> tuple[Any, ...]:
        ...
    
    get_all = ...


def drop_all_tables_from_metadata(metadata, engine_or_connection): # -> None:
    ...

def drop_all_tables(engine, inspector, schema=..., include_names=...): # -> None:
    ...

def teardown_events(event_cls): # -> Callable[..., Any]:
    ...

def total_size(o): # -> int:
    """Returns the approximate memory footprint an object and all of its
    contents.

    source: https://code.activestate.com/recipes/577504/


    """
    ...

def count_cache_key_tuples(tup): # -> int:
    """given a cache key tuple, counts how many instances of actual
    tuples are found.

    used to alert large jumps in cache key complexity.

    """
    ...

